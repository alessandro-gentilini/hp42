# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
#+TITLE:       free42 Base-N Tools
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2021-03-19
#+DESCRIPTION: Description of some free42/hp-42s/DM42 programs for base-n computations
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://richmit.github.io/hp42/
#+EXPORT_FILE_NAME: ../docs/base

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|        <r> | <l>              |
|  *Author:* | /{{{author}}}/ |
| *Updated:* | /{{{time(%Y-%m-%d %H:%M:%S)}}}/ |
#+ATTR_HTML: :align center
Copyright {{{time(%Y)}}} Mitch Richling. All rights reserved.

#+TOC: headlines 5

#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#   00   #    10   #    20   #    30   #    40   #    50   #    60   #    70   #    80   #    90   #   100   #   110   #   120   #   130   #   140   #   150   #   160   #
# 234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #

* Metadata

This home for this HTML file is: https://richmit.github.io/hp42/base.html

Files related to this document may be found on github: https://github.com/richmit/hp42

Directory contents:
   - =src=: The org-mode file that generated this HTML document
   - =src_42s=: Ready to convert source listings for 42s code in this document
   - =docs=: This html document
   - =bin=: Importable RAW program files

* Introduction

#+ATTR_HTML: :align center
file:bviewSS.jpeg

When I'm doing embedded programming I use my HP-16c & DM16 calculators all the time.  I love the DM42, but it has pretty limited base-n capabilities compared
to the 16c.  The programs here significantly augment the 42's capabilities on this front, but they don't quite make the 42 as nice as the 16c.  In particular
you still have to use the BASE menu to enter some hexadecimal digits.

The 42 can deal with 64-bit binary numbers, but it can't display them -- when you try it displays them in hexadecimal.  The =BVIEW= program remedies this
issue and works just fine on a standard free42 screen.  The remainder of the functionality is encapsulated into one program that presents a multitude of bit
manipulation tools in a single, hierarchical menu stricture.  So you only end up with three programs on your 42s -- important for the DM42 because of it's
limited RAM.

* Tiny Number Printing

** =TNPR=: Tiny number printer

#+begin_src hp42s :tangle ../src_42s/base/base.hp42s
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:TNPR)
@@@@ DSC: Tiny Number PRint
@@@@ IN:  Z: Y coordinate for upper left point of character -- Top of screen is 1
@@@@      Y: X coordinate for upper left point of character -- Left of screen is 1
@@@@      X: Character number -- integer in [0, 28]
@@@@ OUT: No return
@@@@ UPD: 2021-02-24
@@@@ BUG: Characters can be *VERY* tiny in high resolution modes on DM42
@@@@ Designed to print numbers:
@@@@    101010b Binary      | 1234567 Decimal    | 123e+45 Float | 123/456 Rational | 123 i56 Complex
@@@@    1A8F10h Hexadecimal | 123,456 Decimal    | 12×10^3 Float | 123456° Degrees  | 123 ∡56 Complex
@@@@    154823o Octal       | -123456 Signed Dec | 1.34567 Float | 
@@@@ Characters can be underlined -- this is used by BVIEW to visually separate nibbles
@@@@ Characters are 3x5 pixels in size.  Underlined characters are 3x7.
@@@@   - Stock HP-42s screen: 32 characters across.  Two full lines on the screen.
@@@@ Non-Underlined Character numbers:
@@@@     00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21  22 23 24 25 26  27  28  29 30  31
@@@@      0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  e  -  +  ×  /  ^ UNK  ,  .  °  b   o   h   i  ∡ SPC
@@@@     48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 16 45 43 01 00 94  -- 23 46 19 98 111 104 105 23  32
@@@@  C   Y  Y  Y  Y  Y  Y  Y  Y  Y  Y                    Y  Y  Y              Y  Y                 Y  Y   Y
@@@@  R   Y  Y  Y  Y  Y  Y  Y  Y  Y  Y                    Y  Y  Y              Y  Y               
@@@@  B   Y  Y                                               Y  Y                               
@@@@  O   Y  Y  Y  Y  Y  Y  Y  Y                             Y  Y                               
@@@@  H   Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y     Y  Y
@@@@ Add 40 to the above character number for the underlined version
LBL "TNPR"
FUNC 30      @@## REQ:free42>=2.5.24
L4STK        @@## REQ:free42>=3.0
IP
XEQ IND ST X
R↓
AGRAPH
RTN
LBL 00       @@@@ CHAR: 0
"•μ•"        @@@@ #b11111 #b10001 #b11111
RTN
LBL 01       @@@@ CHAR: 1
"£•←"        @@@@ #b10010 #b11111 #b10000
RTN
LBL 02       @@@@ CHAR: 2
"ÜÑ∡"        @@@@ #b11101 #b10101 #b10111
RTN
LBL 03       @@@@ CHAR: 3
"μÑ•"        @@@@ #b10001 #b10101 #b11111
RTN
LBL 04       @@@@ CHAR: 4
"π▒•"        @@@@ #b00111 #b00100 #b11111
RTN
LBL 05       @@@@ CHAR: 5
"∡ÑÜ"        @@@@ #b10111 #b10101 #b11101
RTN
LBL 06       @@@@ CHAR: 6
"•ÑÜ"        @@@@ #b11111 #b10101 #b11101
RTN
LBL 07       @@@@ CHAR: 7
"××•"        @@@@ #b00001 #b00001 #b11111
RTN
LBL 08       @@@@ CHAR: 8
"•Ñ•"        @@@@ #b11111 #b10101 #b11111
RTN
LBL 09       @@@@ CHAR: 9
"∡Ñ•"        @@@@ #b00111 #b00101 #b11111
RTN
LBL 10       @@@@ CHAR: A
"•Σ•"        @@@@ #b11111 #b00101 #b11111
RTN
LBL 11       @@@@ CHAR: B
"•Ñ[LF]"     @@@@ #b11111 #b10101 #b01010
RTN
LBL 12       @@@@ CHAR: C
"↓μμ"        @@@@ #b01110 #b10001 #b10001
RTN
LBL 13       @@@@ CHAR: D
"•μ↓"        @@@@ #b11111 #b10001 #b01110
RTN
LBL 14       @@@@ CHAR: E
"•Ñμ"        @@@@ #b11111 #b10101 #b10001
RTN
LBL 15       @@@@ CHAR: F
"•Σ×"        @@@@ #b11111 #b00101 #b00001
RTN
LBL 16       @@@@ CHAR: e
"[LF]ÑÑ"     @@@@ #b01010 #b10101 #b10101
RTN
LBL 17       @@@@ CHAR: -
"▒▒▒"        @@@@ #b00100 #b00100 #b00100
RTN
LBL 18       @@@@ CHAR: +
"▒↓▒"        @@@@ #b01110 #b00100 #b01110
RTN
LBL 19       @@@@ CHAR: ×
"[LF]▒[LF]"  @@@@ #b01010 #b00100 #b01010
RTN
LBL 20       @@@@ CHAR: /
"ᴇ▒∫"        @@@@ #b11000 #b00100 #b00011
RTN
LBL 21       @@@@ CHAR: ^
"√×√"        @@@@ #b00010 #b000010 #b00010
RTN
LBL 22       @@@@ CHAR: :
"÷[LF]÷"     @@@@ #b00000 #b01010 #b00000
"•••"        @@@@ #b11111 #b11111 #b11111
RTN
LBL 23       @@@@ CHAR: ,
"←¿÷"        @@@@ #b10000 #b01000 #b00000
RTN
LBL 24       @@@@ CHAR: .
"÷←÷"        @@@@ #b00000 #b10000 #b00000
RTN
LBL 25       @@@@ degrees
"√Σ√"        @@@@ #b00010 #b00101 #b00010
RTN
LBL 26       @@@@ CHAR: b
"•Å¿"        @@@@ #b11111 #b10100 #b01000
RTN
LBL 27       @@@@ CHAR: o
"≠£≠"        @@@@ #b01100 #b10010 #b01100
RTN
LBL 28       @@@@ CHAR: h
"•▒ᴇ"        @@@@ #b11111 #b10100 #b11000
RTN
LBL 29       @@@@ CHAR: i
"÷Ü÷"        @@@@ #b00000 #b11101 #b00000
RTN
LBL 30       @@@@ CHAR: ∡
"ᴇÅ£"        @@@@ #b11000 #b10100 #b10010
RTN
LBL 31       @@@@ CHAR: SPC
"÷÷÷"        @@@@ #b00000 #b00000 #b00000
RTN
LBL 40       @@@@ CHAR: 0
"_Q_"        @@@@ #b1011111 #b1010001 #b1011111
RTN
LBL 41       @@@@ CHAR: 1
"R_P"        @@@@ #b1010010 #b1011111 #b1010000
RTN
LBL 42       @@@@ CHAR: 2
"]UW"        @@@@ #b1011101 #b1010101 #b1010111
RTN
LBL 43       @@@@ CHAR: 3
"QU_"        @@@@ #b1010001 #b1010101 #b1011111
RTN
LBL 44       @@@@ CHAR: 4
"GD_"        @@@@ #b1000111 #b1000100 #b1011111
RTN
LBL 45       @@@@ CHAR: 5
"WU]"        @@@@ #b1010111 #b1010101 #b1011101
RTN
LBL 46       @@@@ CHAR: 6
"_U]"        @@@@ #b1011111 #b1010101 #b1011101
RTN
LBL 47       @@@@ CHAR: 7
"AA_"        @@@@ #b1000001 #b1000001 #b1011111
RTN
LBL 48       @@@@ CHAR: 8
"_U_"        @@@@ #b1011111 #b1010101 #b1011111
RTN
LBL 49       @@@@ CHAR: 9
"GE_"        @@@@ #b1000111 #b1000101 #b1011111
RTN
LBL 50       @@@@ CHAR: A
"_E_"        @@@@ #b1011111 #b1000101 #b1011111
RTN
LBL 51       @@@@ CHAR: B
"_UJ"        @@@@ #b1011111 #b1010101 #b1001010
RTN
LBL 52       @@@@ CHAR: C
"NQQ"        @@@@ #b1001110 #b1010001 #b1010001
RTN
LBL 53       @@@@ CHAR: D
"_QN"        @@@@ #b1011111 #b1010001 #b1001110
RTN
LBL 54       @@@@ CHAR: E
"_UQ"        @@@@ #b1011111 #b1010101 #b1010001
RTN
LBL 55       @@@@ CHAR: F
"_EA"        @@@@ #b1011111 #b1000101 #b1000001
RTN
LBL 56       @@@@ CHAR: e
"JUU"        @@@@ #b1001010 #b1010101 #b1010101
RTN
LBL 57       @@@@ CHAR: -
"DDD"        @@@@ #b1000100 #b1000100 #b1000100
RTN
LBL 58       @@@@ CHAR: +
"NDN"        @@@@ #b1001110 #b1000100 #b1001110
RTN
LBL 59       @@@@ CHAR: ×
"JDJ"        @@@@ #b1001010 #b1000100 #b1001010
RTN
LBL 60       @@@@ CHAR: /
"XDC"        @@@@ #b1011000 #b1000100 #b1000011
RTN
LBL 61       @@@@ CHAR: ^
"BAB"        @@@@ #b1000010 #b1000001 #b1000010
RTN
LBL 62       @@@@ CHAR: :
"@J@"        @@@@ #b1000000 #b1001010 #b1000000
"___"        @@@@ #b1011111 #b1011111 #b1011111
RTN
LBL 63       @@@@ CHAR: ,
"PH@"        @@@@ #b1010000 #b1001000 #b1000000
RTN
LBL 64       @@@@ CHAR: .
"@P@"        @@@@ #b1000000 #b1010000 #b1000000
RTN
LBL 65       @@@@ degrees
"BEB"        @@@@ #b1000010 #b1000101 #b1000010
RTN
LBL 66       @@@@ CHAR: b
"_TH"        @@@@ #b1011111 #b1010100 #b1001000
RTN
LBL 67       @@@@ CHAR: o
"LRL"        @@@@ #b1001100 #b1010010 #b1001100
RTN
LBL 68       @@@@ CHAR: h
"_TX"        @@@@ #b1011111 #b1010100 #b1011000
RTN
LBL 69       @@@@ CHAR: i
"@]@"        @@@@ #b1000000 #b1011101 #b1000000
RTN
LBL 70       @@@@ CHAR: ∡
"XTR"        @@@@ #b1011000 #b1010100 #b1010010
RTN
LBL 71       @@@@ CHAR: SPC
"@@@"        @@@@ #b1000000 #b1000000 #b1000000
RTN
END
#+END_SRC

** =PATN=: Test =TNPR= by printing all characters

#+begin_src hp42s :tangle no
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:PATN)
@@@@ DSC: Print All Tiny Number Characters
LBL "PATN"
CLLCD
0.031
STO 00
LBL 00
1
RCL 00
4
×
1
+
RCL 00
IP
XEQ "TNPR"
8
RCL 00
4
×
1
+
RCL 00
40
+
IP
XEQ "TNPR"
ISG 00
GTO 00
RTN
END
#+END_SRC

* Printing 64-bit Binary Numbers

#+begin_src hp42s :tangle ../src_42s/base/base.hp42s
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:BVIEW)
@@@@ DSC: Print binary numbers (up to 64-bit)
@@@@ IN:  X: An integer
@@@@ OUT: Nothing -- prints to screen
@@@@ FLG: 81: TEMP: Set: We are on DM42;            Clear: We are not on DM42
@@@@ FLG: 01: PREF: Set: BVIEW jumps to BASE menu;  Clear: BVIEW won't jump to BASE menu
@@@@ FLG: 02: PREF: Set: BVIEW prints WSIZE digits; Clear: BVIEW prints 64 digits
@@@@ FAQ: If XEQ while system BASE menu is active, returns to same menu.
@@@@ BUG: Sometimes gets the system base menu to return to wrong. ;)
@@@@ UPD: 2021-03-20
LBL "BVIEW"
FUNC 11              @@## REQ:free42>=2.5.24
L4STK                @@## REQ:free42>=3.0
0
SF 25
BIT?
FS?C 25
GTO 08
R↓
"ERR: Bad Int!"
AVIEW
RTN
LBL 08
R↓
LSTO "X"
20
1
FS? 68
STO+ ST Y
FS? 70
STO+ ST Y
FS? 71
STO+ ST Y
R↓             @@@@ 20:DECN 21:BINM 22:OCTM 23:HEXM
LSTO "SBMD"
R↓
CF 81
SF 25
RCL "GrMod"
FS?C 25
SF 81
FC? 81
GTO 18
@@@@ We are on a DM42
0
STO "GrMod"     @@@@ Set graphics mode to 42 classic on DM42
R↓
LBL 18
CLLCD
EXITALL
63
1000
÷
LSTO "CTR"
LBL 00
LBL 07
@@@@ Figure out X&Y coordinates for digit
RCL "CTR"            @@@@ IF
IP
32
X>Y?
GTO 01
GTO 02
LBL 01               @@@@ IF-THEN FIRST ROW
1
RCL "CTR"
4
×
1
+
GTO 03
LBL 02               @@@@ IF-ELSE SECOND ROW
9
RCL "CTR"
32
-
4
×
1
+
LBL 03               @@@@ IF-END
@@@@ Figure out current bit value
63
RCL "CTR"            @@@@ IF-BEGIN
IP
-
WSIZE?
X>Y?
GTO 10
GTO 11
LBL 10               @@@@ IF-THEN
R↓
+/-                  @@@@ IF-BEGIN
1
X<>Y
ROTXY
RCL "X"
AND
X=0?
GTO 15
GTO 16
LBL 15               @@@@ IF-THEN bit is 0
R↓
0
GTO 17
LBL 16               @@@@ IF-ELSE bit is 1
R↓
1
LBL 17
LSTO "CB"
GTO 12
LBL 11               @@@@ IF-ELSE
R↓
R↓
@@@@ Bit beyond WSIZE padding character
0
LSTO "CB"
FS? 02
GTO 14
LBL 12               @@@@ IF-END
R↓
@@@@ Figure out grouping
RCL "CTR"            @@@@ IF-START grouping
IP
4
÷
IP
2
÷
FP
X=0?
GTO 04
GTO 05
LBL 04               @@@@ IF-THEN
R↓
0
GTO 06
LBL 05               @@@@ IF-ELSE
R↓
40
LBL 06               @@@@ IF-END
@@@@ Compute digit character code
RCL+ "CB"
@@@@ Draw it
XEQ "TNPR"
LBL 14
ISG  "CTR"
GTO 00
FC? 81
GTO 19
@@@@ On DM42.  Hack to keep screen clean
EXITALL
GETKEY
CLLCD
"BVIEW FINISHED"
AVIEW
LBL 19
XEQ IND "SBMD"
FC? 01
EXITALL
@@@@ Recall original X
RCL "X"
RTN
LBL 20
DECM
RTN
LBL 21
BINM
RTN
LBL 22
RTN
LBL 23
HEXM
RTN
END
#+END_SRC

* BASE-N Application

** Functionality & Menu

#+ATTR_HTML: :align center
#+NAME: basem
| Menu:SubMenu:Key | Program | Description                                     |
|------------------+---------+-------------------------------------------------|
| S&R:SLn          |      88 | Shift Y Left X Bits                             |
| S&R:SRn          |      87 | Shift Y Right X Bits                            |
| S&R:RLn          |      86 | Rotate Y Left by X bits                         |
| S&R:RRn          |      85 | Rotate Y Right by X bits                        |
| S&R:             |         |                                                 |
| S&R:BVIEW        |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| S&R:LJ           |      82 | Left Justify Bits                               |
| S&R:RJ           |      83 | Right Justify Bits                              |
| S&R:SHFXY        |      84 | Shift X by Y Bits (left when Y negative)        |
| S&R:ROTXY        |         |                                                 |
| S&R:             |         |                                                 |
| S&R:BVIEW        |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| S&R:SL           |      92 | Shift Left 1 Bit                                |
| S&R:SR           |      91 | Shift Right 1 Bit                               |
| S&R:RL           |      90 | Rotate Left 1 Bit                               |
| S&R:RR           |      89 | Rotate Right 1 Bit                              |
| S&R:             |         |                                                 |
| S&R:BVIEW        |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| BITS:GETB        |      93 | Return the Xth bit of Y                         |
| BITS:SB          |      95 | Set the Xth bit of Y                            |
| BITS:CB          |      94 | Clear the Xth bit in Y                          |
| BITS:            |         |                                                 |
| BITS:            |         |                                                 |
| BITS:BVIEW       |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| FUN:B#           |      99 | Count set bits                                  |
| FUN:MSSB         |      79 | Position of the Most Significant Set Bit        |
| FUN:LSSB         |      78 | Position of the Least Significant Set Bit       |
| FUN:ILN2         |      80 | Integer base 2 log                              |
| FUN:ISQRT        |      81 | Integer square root                             |
| FUN:BVIEW        |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| MASK:MSKL        |      96 | Create integer with left most X bits set        |
| MASK:MSKR        |      97 | Create integer with right most X bits set       |
| MASK:MSKn        |      98 | Create integer with Y set bits located at bit X |
| MASK:            |         |                                                 |
| MASK:            |         |                                                 |
| MASK:BVIEW       |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| ARTH:AND         |         |                                                 |
| ARTH:OR          |         |                                                 |
| ARTH:XOR         |         |                                                 |
| ARTH:NOT         |         |                                                 |
| ARTH:NEG         | BASE+/- |                                                 |
| ARTH:BVIEW       |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| ARTH:+           |   BASE+ |                                                 |
| ARTH:-           |   BASE- |                                                 |
| ARTH:×           |   BASE× |                                                 |
| ARTH:÷           |   BASE÷ |                                                 |
| ARTH:MOD         |         |                                                 |
| ARTH:BVIEW       |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| BVIEW            |      76 |                                                 |
|------------------+---------+-------------------------------------------------|
| 36               |    HEXM | Set current base to hexadecimal                 |
| 37               |    DECM | Set current base to decimal                     |
| 38               |    OCTM | Set current base to octal                       |
| 39               |    BINM | Set current base to binary                      |
| CFG:31           |   WSIZE | Set WSIZE                                       |
| CFG:32           | BSIGNED | Toggle signed/unsigned mode                     |
| CFG:33           |   BWRAP | Toggle wrapped mode                             |
| CFG:34           |      73 | Toggle BVIEW TODO                               |
| CFG:35           |      74 | Toggle BVIEW TODO                               |
| BMNU             |      75 | Switch to built in BASE menu                    |

** Menu Code

The menu program is generated via the following bit of elisp.  You must first define the =MJR-generate-42-menu-code= and =MJR-custom-x-gen= by evaluating the code blocks in the =hp42s-meta.org= file.
The skeleton was generated by the following code.  That skeleton has been fleshed out with some custom code.

#+BEGIN_SRC elisp :var tbl=basem :colnames y :results output verbatum :wrap "src hp42s :tangle ../src_42s/base/base.hp42s"
(MJR-generate-42-menu-code "BASE" tbl "stay" "up" #'MJR-custom-x-gen)
#+END_SRC

#+RESULTS:
#+begin_src hp42s :tangle ../src_42s/base/base.hp42s
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:BASE)
@@@@ DSC: Auto-generated menu program
LBL "BASE"
LBL 01            @@@@ Page 1 of menu BASE
CLMENU
"S&R"
KEY 1 GTO 03
"BITS"
KEY 2 GTO 04
"FUN"
KEY 3 GTO 05
"MASK"
KEY 4 GTO 06
"ARTH"
KEY 5 GTO 07
"BVIEW"
KEY 6 XEQ 76
KEY 7 GTO 02
KEY 8 GTO 02
KEY 9 GTO 00
MENU
STOP
GTO 01
LBL 02            @@@@ Page 2 of menu BASE
CLMENU
XEQ 36
KEY 1 XEQ 08
XEQ 37
KEY 2 XEQ 09
XEQ 38
KEY 3 XEQ 10
XEQ 39
KEY 4 XEQ 11
"CFG"
KEY 5 GTO 12
"BMNU"
KEY 6 XEQ 75
KEY 7 GTO 01
KEY 8 GTO 01
KEY 9 GTO 00
MENU
STOP
GTO 02
LBL 03            @@@@ Page 1 of menu S&R
CLMENU
"SLn"
KEY 1 XEQ 88
"SRn"
KEY 2 XEQ 87
"RLn"
KEY 3 XEQ 86
"RRn"
KEY 4 XEQ 85
"BVIEW"
KEY 6 XEQ 76
KEY 7 GTO 14
KEY 8 GTO 13
KEY 9 GTO 01
MENU
STOP
GTO 03
LBL 13            @@@@ Page 2 of menu S&R
CLMENU
"LJ"
KEY 1 XEQ 82
"RJ"
KEY 2 XEQ 83
"SHFXY"
KEY 3 XEQ 84
"ROTXY"
KEY 4 XEQ 15
"BVIEW"
KEY 6 XEQ 76
KEY 7 GTO 03
KEY 8 GTO 14
KEY 9 GTO 01
MENU
STOP
GTO 13
LBL 14            @@@@ Page 3 of menu S&R
CLMENU
"SL"
KEY 1 XEQ 92
"SR"
KEY 2 XEQ 91
"RL"
KEY 3 XEQ 90
"RR"
KEY 4 XEQ 89
"BVIEW"
KEY 6 XEQ 76
KEY 7 GTO 13
KEY 8 GTO 03
KEY 9 GTO 01
MENU
STOP
GTO 14
LBL 04            @@@@ Page 1 of menu BITS
CLMENU
"GETB"
KEY 1 XEQ 93
"SB"
KEY 2 XEQ 95
"CB"
KEY 3 XEQ 94
"BVIEW"
KEY 6 XEQ 76
KEY 9 GTO 01
MENU
STOP
GTO 04
LBL 05            @@@@ Page 1 of menu FUN
CLMENU
"B#"
KEY 1 XEQ 99
"MSSB"
KEY 2 XEQ 79
"LSSB"
KEY 3 XEQ 78
"ILN2"
KEY 4 XEQ 80
"ISQRT"
KEY 5 XEQ 81
"BVIEW"
KEY 6 XEQ 76
KEY 9 GTO 01
MENU
STOP
GTO 05
LBL 06            @@@@ Page 1 of menu MASK
CLMENU
"MSKL"
KEY 1 XEQ 96
"MSKR"
KEY 2 XEQ 97
"MSKn"
KEY 3 XEQ 98
"BVIEW"
KEY 6 XEQ 76
KEY 9 GTO 01
MENU
STOP
GTO 06
LBL 07            @@@@ Page 1 of menu ARTH
CLMENU
"AND"
KEY 1 XEQ 17
"OR"
KEY 2 XEQ 18
"XOR"
KEY 3 XEQ 19
"NOT"
KEY 4 XEQ 20
"NEG"
KEY 5 XEQ 21
"BVIEW"
KEY 6 XEQ 76
KEY 7 GTO 16
KEY 8 GTO 16
KEY 9 GTO 01
MENU
STOP
GTO 07
LBL 16            @@@@ Page 2 of menu ARTH
CLMENU
"+"
KEY 1 XEQ 22
"-"
KEY 2 XEQ 23
"×"
KEY 3 XEQ 24
"÷"
KEY 4 XEQ 25
"MOD"
KEY 5 XEQ 26
"BVIEW"
KEY 6 XEQ 76
KEY 7 GTO 07
KEY 8 GTO 07
KEY 9 GTO 01
MENU
STOP
GTO 16
LBL 12            @@@@ Page 1 of menu CFG
CLMENU
XEQ 31
KEY 1 XEQ 27
XEQ 32
KEY 2 XEQ 28
XEQ 33
KEY 3 XEQ 29
XEQ 34
KEY 4 XEQ 73
XEQ 35
KEY 5 XEQ 74
KEY 9 GTO 02
MENU
STOP
GTO 12
LBL 00 @@@@ Application Exit
EXITALL
RTN
LBL 08               @@@@ Action for menu key 36
HEXM
RTN
LBL 09               @@@@ Action for menu key 37
DECM
RTN
LBL 10               @@@@ Action for menu key 38
OCTM
RTN
LBL 11               @@@@ Action for menu key 39
BINM
RTN
LBL 15               @@@@ Action for menu key ROTXY
ROTXY
RTN
LBL 17               @@@@ Action for menu key AND
AND
RTN
LBL 18               @@@@ Action for menu key OR
OR
RTN
LBL 19               @@@@ Action for menu key XOR
XOR
RTN
LBL 20               @@@@ Action for menu key NOT
NOT
RTN
LBL 21               @@@@ Action for menu key NEG
BASE+/-
RTN
LBL 22               @@@@ Action for menu key +
BASE+
RTN
LBL 23               @@@@ Action for menu key -
BASE-
RTN
LBL 24               @@@@ Action for menu key ×
BASE×
RTN
LBL 25               @@@@ Action for menu key ÷
BASE÷
RTN
LBL 26               @@@@ Action for menu key MOD
MOD
RTN
LBL 27               @@@@ Action for menu key 31
WSIZE
RTN
LBL 28               @@@@ Action for menu key 32
BSIGNED
RTN
LBL 29               @@@@ Action for menu key 33
BWRAP
RTN
@@@@ Free labels start at: 30
#+end_src

** Application Local Subroutines

#+BEGIN_SRC hp42s :tangle ../src_42s/base/base.hp42s
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Number of bits set
@@@@ NAM: B# 99
@@@@ IN:  X: an integer
@@@@ OUT: X: Number of 1 bits in IP(X)
@@@@ FAQ: Runtime complexity O(log_2(X))
@@@@ LBL: Used 51-53
@@@@ UPD: 2021-04-10
LBL 99
FUNC 11    @@## REQ:free42>=2.5.24
L4STK      @@## REQ:free42>=3.0
IP
0
X<>Y       @@@@ NUM CNT
1
NOT
X<>Y       @@@@ NUM MASK CNT
LBL 51
RCL ST Y   @@@@ MASK NUM MASK CNT
X<>Y       @@@@ NUM MASK MASK CNT
AND        @@@@ NUM_N MASK CNT
LASTX      @@@@ NUM NUM_N MASK CNT
X=Y?
GTO 52
@@@@ Current bit was set: increment counter
R↓         @@@@ NUM_N MASK CNT
1 
STO+ ST T  @@@@ 1 NUM_N MASK CNT
LBL 52
@@@@ Current bit was clear
R↓         @@@@ NUM_N MASK CNT
X=0?
GTO 53  
@@@@ Still have bits to check
X<>Y       @@@@ MASK NUM_N CNT
-1
ROTXY
X<>Y       @@@@ NUM_N MASK CNT
GTO 51
LBL 53
@@@@ No bits left to check
R↓         @@@@ MASK CNT
R↓         @@@@ CNT
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Create integer with Y set bits located at bit X
@@@@ NAM: MSKn 98
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer (LSB=0)
@@@@ OUT: X: Integer with IP(X) least significant bits set
@@@@ FAQ: Returns int with all 0 bits when X<=0
@@@@ FAQ: Returns int with all 1 bits when X>=WSIZE?
@@@@ LBL: Used 54-55
@@@@ UPD: 2021-03-20
LBL 98
FUNC 11                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
X<>Y
IP
@@@@ All zeros case
X>0?
GTO 54
0
RTN
LBL 54
@@@@ All ones case
WSIZE?
X>Y?
GTO 55
0
NOT
RTN
LBL 55
@@@@ Some ones case
R↓
2
X<>Y
Y↑X
1
-
X<>Y
+/-
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Create integer with right most X bits set
@@@@ NAM: MSKR 97
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer with IP(X) least significant bits set
@@@@ FAQ: Returns int with all 0 bits when X<=0
@@@@ FAQ: Returns int with all 1 bits when X>=WSIZE?
@@@@ LBL: Used 56-57
@@@@ UPD: 2021-03-20
LBL 97
FUNC 11                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
@@@@ All zeros case
X>0?
GTO 56
0
RTN
LBL 56
@@@@ All ones case
WSIZE?
X>Y?
GTO 57
0
NOT
RTN
LBL 57
@@@@ Some ones case
R↓
2
X<>Y
Y↑X
1
-
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Create integer with left most X bits set
@@@@ NAM: MSKL 96
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer with IP(X) most significant bits set
@@@@ FAQ: Returns int with all 0 bits when X<=0
@@@@ FAQ: Returns int with all 1 bits when X>=WSIZE?
@@@@ LBL: Used 58-59
@@@@ UPD: 2021-03-20
LBL 96
FUNC 11                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
@@@@ All zeros case
X>0?
GTO 58
0
RTN
LBL 58
@@@@ All ones case
WSIZE?
X>Y?
GTO 59
0
NOT
RTN
LBL 59
@@@@ Some ones case
R↓
ENTER
2
X<>Y
Y↑X
1
-
X<>Y
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Set the Xth bit of Y
@@@@ NAM: SETB 95
@@@@ IN:  Y: An integer
@@@@      X: An integer (0=LSB)
@@@@ OUT: X: Integer with IP(X)th bit of Y set
@@@@ FAQ: Y is returned unchanged  when X is out of range
@@@@ BUG: When X out of range, the type Y is not error checked
@@@@ LBL: Used 60-61
@@@@ UPD: 2021-03-20
LBL 95
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
@@@@ Do nothing if X negative
X≥0?
GTO 60
R↓
RTN
LBL 60 @@@@ X is positive
@@@@ Do nothing if X>= WSIZE
WSIZE?
X>Y?
GTO 61
R↓
R↓
RTN
LBL 61 @@@@ X is less than WSIZE
R↓
1
X<>Y
+/-
ROTXY
OR
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Clear the Xth bit in Y
@@@@ NAM: CLRB 94
@@@@ IN:  Y: An integer
@@@@      X: An integer (0=LSB)
@@@@ OUT: X: Integer with IP(X)th bit of Y set
@@@@ FAQ: Y is returned unchanged  when X is out of range
@@@@ BUG: When X out of range, the type Y is not error checked
@@@@ LBL: Used 62-63
@@@@ UPD: 2021-03-20
LBL 94
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
@@@@ Do nothing if X negative
X≥0?
GTO 62
R↓
RTN
LBL 62 @@@@ X is positive
@@@@ Do nothing if X>= WSIZE
WSIZE?
X>Y?
GTO 63
R↓
R↓
RTN
LBL 63 @@@@ X is less than WSIZE
R↓
1
X<>Y
+/-
ROTXY
NOT
AND
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Return the Xth bit of Y
@@@@ NAM: GETB 93
@@@@ IN:  Y: An integer
@@@@      X: An integer (0=LSB)
@@@@ OUT: The IP(X)th bit of Y
@@@@ FAQ: Returns 0 when X is out of range
@@@@ BUG: When X out of range, type Y is not error checked
@@@@ LBL: Used 64-66
@@@@ UPD: 2021-03-20
LBL 93
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
@@@@ Return 0 if X negative
X≥0?
GTO 64
0
RTN
LBL 64 @@@@ X is positive
@@@@ Return 0 if X>= WSIZE
WSIZE?
X>Y?
GTO 65
0
RTN
LBL 65 @@@@ X is less than WSIZE
R↓
BIT?
GTO 66
0
RTN
LBL 66
1
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Shift Left 1 Bit
@@@@ NAM: SL 92
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer shifted left 1 bit
@@@@ UPD: 2021-03-20
LBL 92
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
-1
ROTXY
1
NOT
AND
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Shift Right 1 Bit
@@@@ NAM: SR 91
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer shifted right 1 bit
@@@@ UPD: 2021-03-20
LBL 91
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
1
NOT
AND
1
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Rotate Left 1 Bit
@@@@ NAM: RL 90
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer rotated left 1 bit
LBL 90
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
-1
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Rotate Right 1 Bit
@@@@ NAM: RR 89
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer rotated right 1 bit
LBL 89
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
1
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Shift Y Left X Bits
@@@@ NAM: SLn 88
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X shifted left IP(Y) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ FAQ: 0 is returned when X>=WSIZE
@@@@ BUG: The type Y is not error checked when X<=0 or X>=WSIZE
@@@@ LBL: Used 67-68
@@@@ UPD: 2021-03-20
LBL 88
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 67
@@@@ X<=0 => Return 0
R↓
RTN
LBL 67
@@@@ X>0
WSIZE?
X>Y?
GTO 68
@@@@ X>=WSIZE => Return 0
0
RTN
LBL 68
@@@@ X>0 & X<WSIZE
R↓
X<>Y
RCL ST Y
@@@@ Rotate left X bits
+/-
ROTXY
@@@@ Zap the right most X bits
X<>Y
2
X<>Y  @@@@ Use X<>Y twice instead of "RCL ST Z" to minimize stack lift
Y↑X
1
-
NOT
AND
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Shift Y Right X Bits
@@@@ NAM: SRn 87
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X shifted right IP(Y) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ FAQ: 0 is returned when X>=WSIZE
@@@@ BUG: The type Y is not error checked when X<=0 or X>=WSIZE
@@@@ LBL: Used 69-70
@@@@ UPD: 2021-03-20
LBL 87
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 69
@@@@ X<=0 => Return Y
R↓
RTN
LBL 69
@@@@ X>-
WSIZE?
X>Y?
GTO 70
@@@@ X>= WSIZE => Return 0
0
RTN
LBL 70
@@@@ X>0 & X<WSIZE
R↓
X<>Y
RCL ST Y
@@@@ Zap the right most X bits
2
X<>Y
Y↑X
1
-
NOT
AND
@@@@ Rotate right X bits
X<>Y
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Rotate Y Left by X bits
@@@@ NAM: RLn 86
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X rotated left IP(Y) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ BUG: The type Y is not error checked when X<=0
@@@@ LBL: Used 71
@@@@ UPD: 2021-03-20
LBL 86
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 71
R↓
RTN
LBL 71  @@@@ X is positive
+/-
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Rotate Y Right by X bits
@@@@ NAM: RRn 85
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X rotated right ABS(IP(Y)) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ BUG: The type Y is not error checked when X<=0
@@@@ LBL: Used 72
@@@@ UPD: 2021-03-20
LBL 85
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 72
R↓
RTN
LBL 72  @@@@ X is positive
ROTXY
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Shift X by Y Bits (left when Y negative)
@@@@ NAM: SHFXY 84
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer shifted by IP(Y) bit(s)
@@@@ FAQ: Uses SLn & SLr.
@@@@ LBL: Used 49-50
@@@@ UPD: 2021-03-20
LBL 84
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X<0?
GTO 49
GTO 50
LBL 49 @@@@ X negative -- shift left
+/-
XEQ 88
RTN
LBL 50 @@@@ X non-negative -- shift right
XEQ 87
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Right Justify Bits
@@@@ NAM: RJ 83
@@@@ IN:  X: an integer
@@@@ OUT: Y: Number of shifts required to justify
@@@@ OUT: X: Justified number
@@@@ FAQ: Like the HP-16c's LJ funciton, but justifies in the other direction
@@@@ LBL: Used 46-48
@@@@ UPD: 2021-03-20
LBL 83
FUNC 12                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
0
X<>Y
LBL 47
0
BIT?
GTO 46
GTO 48
LBL 46   @@@@ LSB is one -- DONE!
R↓
X<>Y
RTN
LBL 48   @@@@ LSB is zero
R↓
1
STO+ ST Z
ROTXY
GTO 47

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Left Justify Bits
@@@@ NAM: LJ 82
@@@@ IN:  X: an integer
@@@@ OUT: Y: Number of shifts required to justify
@@@@ OUT: X: Justified number
@@@@ FAQ: Just like the HP-16c's LJ funciton
@@@@ LBL: Used 41-43
@@@@ UPD: 2021-03-20
LBL 82
FUNC 12                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
0
X<>Y
LBL 41
WSIZE?
1
-
BIT?
GTO 42
GTO 43
LBL 42   @@@@ MSB is one -- DONE!
R↓
X<>Y
RTN
LBL 43   @@@@ MSB is zero
R↓
1
STO+ ST Z
+/-
ROTXY
GTO 41

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Integer square root
@@@@ NAM: ISQRT 81
@@@@ IN:  X: a non-negative real number
@@@@ OUT: X: IP(SQRT(ABS(X)))
@@@@ UPD: 2021-03-16
LBL 81
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
ABS
SQRT
IP
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Integer base 2 log
@@@@ NAM: ILN2 80
@@@@ IN:  X: a positive real number
@@@@ OUT: X: IP(log_2(ABS(X)))
@@@@ UPD: 2021-03-16
LBL 80
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
ABS
LN
2
LN
÷
IP
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Position of the Most Significant Set Bit
@@@@ NAM: MSSB 79
@@@@ IN:  X: An integer
@@@@ OUT: X: Position of MSSB in IP(X) or -1 if IP(X) was 0
@@@@ USE: LJ
@@@@ UPD: 2021-03-16
@@@@ FAQ: Runtime Complexity O(WSIZE-log_2(X))
@@@@ FAQ: Closely related to LJ program
@@@@ LBL: Used 41-43
LBL 79
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X≠0?
GTO 44
-1
RTN
LBL 44 @@@@ X not zero
XEQ 82
1
+
WSIZE?
X<>Y
-
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ DSC: Position of the Least Significant Set Bit
@@@@ NAM: LSSB 78
@@@@ IN:  X: An integer
@@@@ OUT: X: Position of LSSB in IP(X) or -1 if IP(X) was 0
@@@@ UPD: 2021-03-16
@@@@ FAQ: Runtime Complexity O(LSSB(X)) & LSSB<WSIZE
@@@@ FAQ: Closely related to RJ program
LBL 78
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X≠0?
GTO 45
-1
RTN
LBL 45 @@@@ X not zero
XEQ 83
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: WSIZE
LBL 31
"W:"
WSIZE?
AIP
R↓
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: BSIGNED
LBL 32
FS? 78
"S:+/-"
FC? 78
"S:+"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: BWRAP
LBL 33
FS? 79
"BWR•"
FC? 79
"BWRP"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: BVIEW 
LBL 34
FS? 01
"BVM•"
FC? 01
"BVM"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: BVIEW 
LBL 35
FC? 02
"BVA•"
FS? 02
"BVA"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: HEX
LBL 36
"HEX"
FS? 71
├"•"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: DEC
LBL 37
"DEC"
SF 81
FS? 71
CF 81
FS? 70
CF 81
FS? 68
CF 81
FS? 81
├"•"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: OCT
LBL 38
"OCT"
SF 81
FS? 71
CF 81
FC? 70
CF 81
FS? 81
├"•"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Label: BIN
LBL 39
"BIN"
SF 81
FC? 68
CF 81
FS? 69
CF 81
FS? 81
├"•"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Toggle 01
LBL 73
FS?C 01
RTN
SF 01
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Toggle 02
LBL 74
FS?C 02
RTN
SF 02
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Action BINM
LBL 75
EXITALL
"Press R/S To"
"├ Return"
AVIEW
HEXM
STOP
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@ Menu Action BVIEW
LBL 76
XEQ "BVIEW"
RTN

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
END
#+END_SRC

* WORKING                                                          :noexport:

#+BEGIN_SRC text
:::::::::::::::::::::::'##:::::'##::::'###::::'########::'##::: ##:'####:'##::: ##::'######::::::::::::::::::::::::
::::::::::::::::::::::: ##:'##: ##:::'## ##::: ##.... ##: ###:: ##:. ##:: ###:: ##:'##... ##:::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##::'##:. ##:: ##:::: ##: ####: ##:: ##:: ####: ##: ##:::..::::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##:'##:::. ##: ########:: ## ## ##:: ##:: ## ## ##: ##::'####::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##: #########: ##.. ##::: ##. ####:: ##:: ##. ####: ##::: ##:::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##: ##.... ##: ##::. ##:: ##:. ###:: ##:: ##:. ###: ##::: ##:::::::::::::::::::::::
:::::::::::::::::::::::. ###. ###:: ##:::: ##: ##:::. ##: ##::. ##:'####: ##::. ##:. ######::::::::::::::::::::::::
::::::::::::::::::::::::...::...:::..:::::..::..:::::..::..::::..::....::..::::..:::......:::::::::::::::::::::::::
#+END_SRC

Code in this section is under construction.  Most likely broken.

* EOF

# End of document.

# The following adds some space at the bottom of exported HTML
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
