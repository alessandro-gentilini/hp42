# -*- Mode:Org; Coding:utf-8; fill-column:158 -*-
#+TITLE:       free42 Base-N Tools
#+AUTHOR:      Mitch Richling
#+EMAIL:       http://www.mitchr.me/
#+DATE:        2021-03-19
#+DESCRIPTION: Description of some free42/hp-42s/DM42 programs for base-n computations
#+LANGUAGE:    en
#+OPTIONS:     num:t toc:nil \n:nil @:t ::t |:t ^:nil -:t f:t *:t <:t skip:nil d:nil todo:t pri:nil H:5 p:t author:t html-scripts:nil
#+HTML_HEAD: <style>body { width: 95%; margin: 2% auto; font-size: 18px; line-height: 1.4em; font-family: Georgia, serif; color: black; background-color: white; }</style>
#+HTML_HEAD: <style>body { min-width: 500px; max-width: 1024px; }</style>
#+HTML_HEAD: <style>h1,h2,h3,h4,h5,h6 { color: #A5573E; line-height: 1em; font-family: Helvetica, sans-serif; }</style>
#+HTML_HEAD: <style>h1,h2,h3 { line-height: 1.4em; }</style>
#+HTML_HEAD: <style>h1.title { font-size: 3em; }</style>
#+HTML_HEAD: <style>h4,h5,h6 { font-size: 1em; }</style>
#+HTML_HEAD: <style>.org-src-container { border: 1px solid #ccc; box-shadow: 3px 3px 3px #eee; font-family: Lucida Console, monospace; font-size: 80%; margin: 0px; padding: 0px 0px; position: relative; }</style>
#+HTML_HEAD: <style>.org-src-container>pre { line-height: 1.2em; padding-top: 1.5em; margin: 0.5em; background-color: #404040; color: white; overflow: auto; }</style>
#+HTML_HEAD: <style>.org-src-container>pre:before { display: block; position: absolute; background-color: #b3b3b3; top: 0; right: 0; padding: 0 0.2em 0 0.4em; border-bottom-left-radius: 8px; border: 0; color: white; font-size: 100%; font-family: Helvetica, sans-serif;}</style>
#+HTML_HEAD: <style>pre.example { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -o-pre-wrap; font-family: Lucida Console, monospace; font-size: 80%; background: #404040; color: white; display: block; padding: 0em; border: 2px solid black; }</style>
#+HTML_LINK_HOME: https://www.mitchr.me/
#+HTML_LINK_UP: https://richmit.github.io/hp42/
#+EXPORT_FILE_NAME: ../docs/base

#+ATTR_HTML: :border 2 solid #ccc :frame hsides :align center
|        <r> | <l>              |
|  *Author:* | /{{{author}}}/ |
| *Updated:* | /{{{time(%Y-%m-%d %H:%M:%S)}}}/ |
#+ATTR_HTML: :align center
Copyright {{{time(%Y)}}} Mitch Richling. All rights reserved.

#+TOC: headlines 5

#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#   00   #    10   #    20   #    30   #    40   #    50   #    60   #    70   #    80   #    90   #   100   #   110   #   120   #   130   #   140   #   150   #   160   #
# 234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #
#        #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #         #

* Metadata

This home for this HTML file is: https://richmit.github.io/hp42/base.html

Files related to this document may be found on github: https://github.com/richmit/hp42

   - =src= directory: Contains the org-mode file that generated this HTML document
   - =docs= directory: Contains this html document
   - =bin= directory: Contains raw program files

* Introduction

#+ATTR_HTML: :align center
file:bviewSS.jpeg

When I'm doing embedded programming I use my HP-16c & DM16 calculators all the time.  I love the DM42, but it has pretty limited base-n capabilities compared
to the 16c.  The programs here significantly augment the 42's capabilities on this front, but they don't quite make the 42 as nice as the 16c.  In particular
you still have to use the BASE menu to enter some hexadecimal digits.

The 42 can deal with 64-bit binary numbers, but it can't display them -- when you try it displays them in hexadecimal.  The [[(BVIEW)][=BVIEW=]] program remedies this
issue and works just fine on a standard HP-42s or free42 screen.  [[(BVIEW)][=BVIEW=]] uses the [[(TNPR)][=TNPR=]] function to draw the digits -- this uses a tiny, 5 pixel tall font.
The character set is sufficient to display all kinds of numbers, but the only thing I have implemented so far is the binary number printer.

This code is structured as several independent functions (See: [[Bit Manipulation Functions][the code]]) that are then tied together into a menu (See: [[Menu Contents][Menu Contents]]) for easy access -- See
the code [[Menu Code][here]].  This allows you to use these functions in your own programs.  The individual functions are documented in the code.

* Tiny Number Printing

** =TNPR=: Tiny number printer

#+begin_src hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:TNPR)
@@@@ DSC: Tiny Number PRint
@@@@ IN:  Z: Y coordinate for upper left point of character -- Top of screen is 1
@@@@      Y: X coordinate for upper left point of character -- Left of screen is 1
@@@@      X: Character number -- integer in [0, 28]
@@@@ OUT: No return
@@@@ UPD: 2021-02-24
@@@@ BUG: Characters can be *VERY* tiny in high resolution modes on DM42
@@@@ Designed to print numbers:
@@@@    101010b Binary      | 1234567 Decimal    | 123e+45 Float | 123/456 Rational | 123 i56 Complex
@@@@    1A8F10h Hexadecimal | 123,456 Decimal    | 12×10^3 Float | 123456° Degrees  | 123 ∡56 Complex
@@@@    154823o Octal       | -123456 Signed Dec | 1.34567 Float | 
@@@@ Characters can be underlined -- this is used by BVIEW to visually separate nibbles
@@@@ Characters are 3x5 pixels in size.  Underlined characters are 3x7.
@@@@   - Stock HP-42s screen: 32 characters across.  Two full lines on the screen.
@@@@ Non-Underlined Character numbers:
@@@@     00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21  22 23 24 25 26  27  28  29 30  31
@@@@      0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F  e  -  +  ×  /  ^ UNK  ,  .  °  b   o   h   i  ∡ SPC
@@@@     48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 16 45 43 01 00 94  -- 23 46 19 98 111 104 105 23  32
@@@@  C   Y  Y  Y  Y  Y  Y  Y  Y  Y  Y                    Y  Y  Y              Y  Y                 Y  Y   Y
@@@@  R   Y  Y  Y  Y  Y  Y  Y  Y  Y  Y                    Y  Y  Y              Y  Y               
@@@@  B   Y  Y                                               Y  Y                               
@@@@  O   Y  Y  Y  Y  Y  Y  Y  Y                             Y  Y                               
@@@@  H   Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y  Y     Y  Y
@@@@ Add 40 to the above character number for the underlined version
LBL "TNPR"
FUNC 30      @@## REQ:free42>=2.5.24
L4STK        @@## REQ:free42>=3.0
IP
XEQ IND ST X
R↓
AGRAPH
RTN
LBL 00       @@@@ CHAR: 0
"•μ•"        @@@@ #b11111 #b10001 #b11111
RTN
LBL 01       @@@@ CHAR: 1
"£•←"        @@@@ #b10010 #b11111 #b10000
RTN
LBL 02       @@@@ CHAR: 2
"ÜÑ∡"        @@@@ #b11101 #b10101 #b10111
RTN
LBL 03       @@@@ CHAR: 3
"μÑ•"        @@@@ #b10001 #b10101 #b11111
RTN
LBL 04       @@@@ CHAR: 4
"π▒•"        @@@@ #b00111 #b00100 #b11111
RTN
LBL 05       @@@@ CHAR: 5
"∡ÑÜ"        @@@@ #b10111 #b10101 #b11101
RTN
LBL 06       @@@@ CHAR: 6
"•ÑÜ"        @@@@ #b11111 #b10101 #b11101
RTN
LBL 07       @@@@ CHAR: 7
"××•"        @@@@ #b00001 #b00001 #b11111
RTN
LBL 08       @@@@ CHAR: 8
"•Ñ•"        @@@@ #b11111 #b10101 #b11111
RTN
LBL 09       @@@@ CHAR: 9
"∡Ñ•"        @@@@ #b00111 #b00101 #b11111
RTN
LBL 10       @@@@ CHAR: A
"•Σ•"        @@@@ #b11111 #b00101 #b11111
RTN
LBL 11       @@@@ CHAR: B
"•Ñ[LF]"     @@@@ #b11111 #b10101 #b01010
RTN
LBL 12       @@@@ CHAR: C
"↓μμ"        @@@@ #b01110 #b10001 #b10001
RTN
LBL 13       @@@@ CHAR: D
"•μ↓"        @@@@ #b11111 #b10001 #b01110
RTN
LBL 14       @@@@ CHAR: E
"•Ñμ"        @@@@ #b11111 #b10101 #b10001
RTN
LBL 15       @@@@ CHAR: F
"•Σ×"        @@@@ #b11111 #b00101 #b00001
RTN
LBL 16       @@@@ CHAR: e
"[LF]ÑÑ"     @@@@ #b01010 #b10101 #b10101
RTN
LBL 17       @@@@ CHAR: -
"▒▒▒"        @@@@ #b00100 #b00100 #b00100
RTN
LBL 18       @@@@ CHAR: +
"▒↓▒"        @@@@ #b01110 #b00100 #b01110
RTN
LBL 19       @@@@ CHAR: ×
"[LF]▒[LF]"  @@@@ #b01010 #b00100 #b01010
RTN
LBL 20       @@@@ CHAR: /
"ᴇ▒∫"        @@@@ #b11000 #b00100 #b00011
RTN
LBL 21       @@@@ CHAR: ^
"√×√"        @@@@ #b00010 #b000010 #b00010
RTN
LBL 22       @@@@ CHAR: :
"÷[LF]÷"     @@@@ #b00000 #b01010 #b00000
"•••"        @@@@ #b11111 #b11111 #b11111
RTN
LBL 23       @@@@ CHAR: ,
"←¿÷"        @@@@ #b10000 #b01000 #b00000
RTN
LBL 24       @@@@ CHAR: .
"÷←÷"        @@@@ #b00000 #b10000 #b00000
RTN
LBL 25       @@@@ degrees
"√Σ√"        @@@@ #b00010 #b00101 #b00010
RTN
LBL 26       @@@@ CHAR: b
"•Å¿"        @@@@ #b11111 #b10100 #b01000
RTN
LBL 27       @@@@ CHAR: o
"≠£≠"        @@@@ #b01100 #b10010 #b01100
RTN
LBL 28       @@@@ CHAR: h
"•▒ᴇ"        @@@@ #b11111 #b10100 #b11000
RTN
LBL 29       @@@@ CHAR: i
"÷Ü÷"        @@@@ #b00000 #b11101 #b00000
RTN
LBL 30       @@@@ CHAR: ∡
"ᴇÅ£"        @@@@ #b11000 #b10100 #b10010
RTN
LBL 31       @@@@ CHAR: SPC
"÷÷÷"        @@@@ #b00000 #b00000 #b00000
RTN
LBL 40       @@@@ CHAR: 0
"_Q_"        @@@@ #b1011111 #b1010001 #b1011111
RTN
LBL 41       @@@@ CHAR: 1
"R_P"        @@@@ #b1010010 #b1011111 #b1010000
RTN
LBL 42       @@@@ CHAR: 2
"]UW"        @@@@ #b1011101 #b1010101 #b1010111
RTN
LBL 43       @@@@ CHAR: 3
"QU_"        @@@@ #b1010001 #b1010101 #b1011111
RTN
LBL 44       @@@@ CHAR: 4
"GD_"        @@@@ #b1000111 #b1000100 #b1011111
RTN
LBL 45       @@@@ CHAR: 5
"WU]"        @@@@ #b1010111 #b1010101 #b1011101
RTN
LBL 46       @@@@ CHAR: 6
"_U]"        @@@@ #b1011111 #b1010101 #b1011101
RTN
LBL 47       @@@@ CHAR: 7
"AA_"        @@@@ #b1000001 #b1000001 #b1011111
RTN
LBL 48       @@@@ CHAR: 8
"_U_"        @@@@ #b1011111 #b1010101 #b1011111
RTN
LBL 49       @@@@ CHAR: 9
"GE_"        @@@@ #b1000111 #b1000101 #b1011111
RTN
LBL 50       @@@@ CHAR: A
"_E_"        @@@@ #b1011111 #b1000101 #b1011111
RTN
LBL 51       @@@@ CHAR: B
"_UJ"        @@@@ #b1011111 #b1010101 #b1001010
RTN
LBL 52       @@@@ CHAR: C
"NQQ"        @@@@ #b1001110 #b1010001 #b1010001
RTN
LBL 53       @@@@ CHAR: D
"_QN"        @@@@ #b1011111 #b1010001 #b1001110
RTN
LBL 54       @@@@ CHAR: E
"_UQ"        @@@@ #b1011111 #b1010101 #b1010001
RTN
LBL 55       @@@@ CHAR: F
"_EA"        @@@@ #b1011111 #b1000101 #b1000001
RTN
LBL 56       @@@@ CHAR: e
"JUU"        @@@@ #b1001010 #b1010101 #b1010101
RTN
LBL 57       @@@@ CHAR: -
"DDD"        @@@@ #b1000100 #b1000100 #b1000100
RTN
LBL 58       @@@@ CHAR: +
"NDN"        @@@@ #b1001110 #b1000100 #b1001110
RTN
LBL 59       @@@@ CHAR: ×
"JDJ"        @@@@ #b1001010 #b1000100 #b1001010
RTN
LBL 60       @@@@ CHAR: /
"XDC"        @@@@ #b1011000 #b1000100 #b1000011
RTN
LBL 61       @@@@ CHAR: ^
"BAB"        @@@@ #b1000010 #b1000001 #b1000010
RTN
LBL 62       @@@@ CHAR: :
"@J@"        @@@@ #b1000000 #b1001010 #b1000000
"___"        @@@@ #b1011111 #b1011111 #b1011111
RTN
LBL 63       @@@@ CHAR: ,
"PH@"        @@@@ #b1010000 #b1001000 #b1000000
RTN
LBL 64       @@@@ CHAR: .
"@P@"        @@@@ #b1000000 #b1010000 #b1000000
RTN
LBL 65       @@@@ degrees
"BEB"        @@@@ #b1000010 #b1000101 #b1000010
RTN
LBL 66       @@@@ CHAR: b
"_TH"        @@@@ #b1011111 #b1010100 #b1001000
RTN
LBL 67       @@@@ CHAR: o
"LRL"        @@@@ #b1001100 #b1010010 #b1001100
RTN
LBL 68       @@@@ CHAR: h
"_TX"        @@@@ #b1011111 #b1010100 #b1011000
RTN
LBL 69       @@@@ CHAR: i
"@]@"        @@@@ #b1000000 #b1011101 #b1000000
RTN
LBL 70       @@@@ CHAR: ∡
"XTR"        @@@@ #b1011000 #b1010100 #b1010010
RTN
LBL 71       @@@@ CHAR: SPC
"@@@"        @@@@ #b1000000 #b1000000 #b1000000
RTN
END
#+END_SRC

** =PATN=: Test =TNPR= by printing all characters

#+begin_src hp42s
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:PATN)
@@@@ DSC: Print All Tiny Number Characters
LBL "PATN"
CLLCD
0.031
STO 00
LBL 00
1
RCL 00
4
×
1
+
RCL 00
IP
XEQ "TNPR"
8
RCL 00
4
×
1
+
RCL 00
40
+
IP
XEQ "TNPR"
ISG 00
GTO 00
RTN
END
#+END_SRC

* =BVIEW=: Print a 64-bit Binary Number

#+begin_src hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:BVIEW)
@@@@ DSC: Print binary numbers (up to 64-bit)
@@@@ IN:  X: An integer
@@@@ OUT: Nothing -- prints to screen
@@@@ FLG: 81: TEMP: Set: We are on DM42;            Clear: We are not on DM42
@@@@ FLG: 01: PREF: Set: BVIEW jumps to BASE menu;  Clear: BVIEW won't jump to BASE menu
@@@@ FLG: 02: PREF: Set: BVIEW prints WSIZE digits; Clear: BVIEW prints 64 digits
@@@@ FAQ: If XEQ while system BASE menu is active, returns to same menu.
@@@@ BUG: Sometimes gets the system base menu to return to wrong. ;)
@@@@ UPD: 2021-03-20
LBL "BVIEW"
FUNC 11              @@## REQ:free42>=2.5.24
L4STK                @@## REQ:free42>=3.0
0
SF 25
BIT?
FS?C 25
GTO 08
R↓
"ERR: Bad Int!"
AVIEW
RTN
LBL 08
R↓
LSTO "X"
20
1
FS? 68
STO+ ST Y
FS? 70
STO+ ST Y
FS? 71
STO+ ST Y
R↓             @@@@ 20:DECN 21:BINM 22:OCTM 23:HEXM
LSTO "SBMD"
R↓
CF 81
SF 25
RCL "GrMod"
FS?C 25
SF 81
FC? 81
GTO 18
@@@@ We are on a DM42
0
STO "GrMod"     @@@@ Set graphics mode to 42 classic on DM42
R↓
LBL 18
CLLCD
EXITALL
63
1000
÷
LSTO "CTR"
LBL 00
LBL 07
@@@@ Figure out X&Y coordinates for digit
RCL "CTR"            @@@@ IF
IP
32
X>Y?
GTO 01
GTO 02
LBL 01               @@@@ IF-THEN FIRST ROW
1
RCL "CTR"
4
×
1
+
GTO 03
LBL 02               @@@@ IF-ELSE SECOND ROW
9
RCL "CTR"
32
-
4
×
1
+
LBL 03               @@@@ IF-END
@@@@ Figure out current bit value
63
RCL "CTR"            @@@@ IF-BEGIN
IP
-
WSIZE?
X>Y?
GTO 10
GTO 11
LBL 10               @@@@ IF-THEN
R↓
+/-                  @@@@ IF-BEGIN
1
X<>Y
ROTXY
RCL "X"
AND
X=0?
GTO 15
GTO 16
LBL 15               @@@@ IF-THEN bit is 0
R↓
0
GTO 17
LBL 16               @@@@ IF-ELSE bit is 1
R↓
1
LBL 17
LSTO "CB"
GTO 12
LBL 11               @@@@ IF-ELSE
R↓
R↓
@@@@ Bit beyond WSIZE padding character
0
LSTO "CB"
FS? 02
GTO 14
LBL 12               @@@@ IF-END
R↓
@@@@ Figure out grouping
RCL "CTR"            @@@@ IF-START grouping
IP
4
÷
IP
2
÷
FP
X=0?
GTO 04
GTO 05
LBL 04               @@@@ IF-THEN
R↓
0
GTO 06
LBL 05               @@@@ IF-ELSE
R↓
40
LBL 06               @@@@ IF-END
@@@@ Compute digit character code
RCL+ "CB"
@@@@ Draw it
XEQ "TNPR"
LBL 14
ISG  "CTR"
GTO 00
FC? 81
GTO 19
@@@@ On DM42.  Hack to keep screen clean
EXITALL
GETKEY
CLLCD
"BVIEW FINISHED"
AVIEW
LBL 19
XEQ IND "SBMD"
FC? 01
EXITALL
@@@@ Recall original X
RCL "X"
RTN
LBL 20
DECM
RTN
LBL 21
BINM
RTN
LBL 22
RTN
LBL 23
HEXM
RTN
END
#+END_SRC

* Bit Manipulation Functions

** =B#=: Count set bits

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:BCNT)
@@@@ DSC: Number of bits set
@@@@ IN:  X: an integer
@@@@ OUT: X: Number of 1 bits in IP(X)
@@@@ FAQ: Runtime complexity O(log_2(X))
@@@@ UPD: 2021-03-20
LBL "B#"
FUNC 11                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
0
X<>Y
LBL 00
0
BIT?
GTO 01
GTO 02
LBL 01   @@@@ 1 -> inc Counter
R↓
1
STO+ ST Z
LBL 02
R↓
X≠0?
GTO 03  @@@@ Zero, so return Counter
R↓
RTN
LBL 03  @@@@ Not a zero yet, so wack 1 and rotate
1
NOT
AND
1
ROTXY
GTO 00
END
#+END_SRC

** =MSKn=: Create integer with Y set bits located at bit X

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:MSKn)
@@@@ DSC: Create integer with Y set bits located at bit X
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer (LSB=0)
@@@@ OUT: X: Integer with IP(X) least significant bits set
@@@@ FAQ: Returns int with all 0 bits when X<=0
@@@@ FAQ: Returns int with all 1 bits when X>=WSIZE?
@@@@ UPD: 2021-03-20
LBL "MSKn"
FUNC 11                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
X<>Y
IP
@@@@ All zeros case
X>0?
GTO 01
0
RTN
LBL 01
@@@@ All ones case
WSIZE?
X>Y?
GTO 02
0
NOT
RTN
LBL 02
@@@@ Some ones case
R↓
2
X<>Y
Y↑X
1
-
X<>Y
+/-
ROTXY
RTN
END
#+END_SRC

** =MSKR=: Create integer with right most X bits set

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:MSKR)
@@@@ DSC: Create integer with right most X bits set
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer with IP(X) least significant bits set
@@@@ FAQ: Returns int with all 0 bits when X<=0
@@@@ FAQ: Returns int with all 1 bits when X>=WSIZE?
@@@@ UPD: 2021-03-20
LBL "MSKR"
FUNC 11                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
@@@@ All zeros case
X>0?
GTO 01
0
RTN
LBL 01
@@@@ All ones case
WSIZE?
X>Y?
GTO 02
0
NOT
RTN
LBL 02
@@@@ Some ones case
R↓
2
X<>Y
Y↑X
1
-
RTN
END
#+END_SRC

** =MSKL=: Create integer with left most X bits set

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:MSKL)
@@@@ DSC: Create integer with left most X bits set
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer with IP(X) most significant bits set
@@@@ FAQ: Returns int with all 0 bits when X<=0
@@@@ FAQ: Returns int with all 1 bits when X>=WSIZE?
@@@@ UPD: 2021-03-20
LBL "MSKL"
FUNC 11                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
@@@@ All zeros case
X>0?
GTO 01
0
RTN
LBL 01
@@@@ All ones case
WSIZE?
X>Y?
GTO 02
0
NOT
RTN
LBL 02
@@@@ Some ones case
R↓
ENTER
2
X<>Y
Y↑X
1
-
X<>Y
ROTXY
RTN
END
#+END_SRC

** =SETB=: Set the Xth bit of Y

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:SETB)
@@@@ DSC: Set the Xth bit of Y
@@@@ IN:  Y: An integer
@@@@      X: An integer (0=LSB)
@@@@ OUT: X: Integer with IP(X)th bit of Y set
@@@@ FAQ: Y is returned unchanged  when X is out of range
@@@@ BUG: When X out of range, the type Y is not error checked
@@@@ UPD: 2021-03-20
LBL "SETB"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
@@@@ Do nothing if X negative
X≥0?
GTO 01
R↓
RTN
LBL 01 @@@@ X is positive
@@@@ Do nothing if X>= WSIZE
WSIZE?
X>Y?
GTO 02
R↓
R↓
RTN
LBL 02 @@@@ X is less than WSIZE
R↓
1
X<>Y
+/-
ROTXY
OR
RTN
END
#+END_SRC

** =CLRB=: Clear the Xth bit in Y

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:CLRB)
@@@@ DSC: Clear the Xth bit in Y
@@@@ IN:  Y: An integer
@@@@      X: An integer (0=LSB)
@@@@ OUT: X: Integer with IP(X)th bit of Y set
@@@@ FAQ: Y is returned unchanged  when X is out of range
@@@@ BUG: When X out of range, the type Y is not error checked
@@@@ UPD: 2021-03-20
LBL "CLRB"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
@@@@ Do nothing if X negative
X≥0?
GTO 01
R↓
RTN
LBL 01 @@@@ X is positive
@@@@ Do nothing if X>= WSIZE
WSIZE?
X>Y?
GTO 02
R↓
R↓
RTN
LBL 02 @@@@ X is less than WSIZE
R↓
1
X<>Y
+/-
ROTXY
NOT
AND
RTN
END
#+END_SRC

** =GETB=: Return the Xth bit of Y

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:GETB)
@@@@ DSC: Return the Xth bit of Y
@@@@ IN:  Y: An integer
@@@@      X: An integer (0=LSB)
@@@@ OUT: The IP(X)th bit of Y
@@@@ FAQ: Returns 0 when X is out of range
@@@@ BUG: When X out of range, type Y is not error checked
@@@@ UPD: 2021-03-20
LBL "GETB"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
@@@@ Return 0 if X negative
X≥0?
GTO 01
0
RTN
LBL 01 @@@@ X is positive
@@@@ Return 0 if X>= WSIZE
WSIZE?
X>Y?
GTO 02
0
RTN
LBL 02 @@@@ X is less than WSIZE
R↓
BIT?   @@@@ IF-BEGIN
GTO 01
GTO 02
LBL 01 @@@@ IF-THEN
1
GTO 03
LBL 02 @@@@ IF-ELSE
0
LBL 03 @@@@ IF-END
RTN
END
#+END_SRC

** =SL=: Shift Left 1 Bit

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:SL)
@@@@ DSC: Shift Left 1 Bit
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer shifted left 1 bit
@@@@ UPD: 2021-03-20
LBL "SL"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
-1
ROTXY
1
NOT
AND
RTN
END
#+END_SRC

** =SR=: Shift Right 1 Bit

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:SR)
@@@@ DSC: Shift Right 1 Bit
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer shifted right 1 bit
@@@@ UPD: 2021-03-20
LBL "SR"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
1
NOT
AND
1
ROTXY
RTN
END
#+END_SRC

** =RL=: Rotate Left 1 Bit

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:RL)
@@@@ DSC: Rotate Left 1 Bit
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer rotated left 1 bit
LBL "RL"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
-1
ROTXY
RTN
END
#+END_SRC

** =RR=: Rotate Right 1 Bit

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:RR)
@@@@ DSC: Rotate Right 1 Bit
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer rotated right 1 bit
LBL "RR"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
1
ROTXY
RTN
END
#+END_SRC

** =SLn=: Shift Y Left X Bits

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:SLn)
@@@@ DSC: Shift Y Left X Bits
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X shifted left IP(Y) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ FAQ: 0 is returned when X>=WSIZE
@@@@ BUG: The type Y is not error checked when X<=0 or X>=WSIZE
@@@@ UPD: 2021-03-20
LBL "SLn"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 01
R↓
RTN
LBL 01  @@@@ X is positive
@@@@ Return 0 if X>= WSIZE
WSIZE?
X>Y?
GTO 02
0
RTN
LBL 02 @@@@ X is less than WSIZE
X<>Y
RCL ST Y
@@@@ Rotate left X bits
+/-
ROTXY
@@@@ Zap the right most X bits
X<>Y
2
X<>Y  @@@@ Use X<>Y twice instead of "RCL ST Z" to minimize stack lift
Y↑X
1
-
NOT
AND
RTN
END
#+END_SRC

** =SRn=: Shift Y Right X Bits

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:SRn)
@@@@ DSC: Shift Y Right X Bits
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X shifted right IP(Y) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ FAQ: 0 is returned when X>=WSIZE
@@@@ BUG: The type Y is not error checked when X<=0 or X>=WSIZE
@@@@ UPD: 2021-03-20
LBL "SRn"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 01
R↓
RTN
LBL 01  @@@@ X is positive
@@@@ Return 0 if X>= WSIZE
WSIZE?
X>Y?
GTO 02
0
RTN
LBL 02 @@@@ X is less than WSIZE
X<>Y
RCL ST Y
@@@@ Zap the right most X bits
2
X<>Y  @@@@ Use X<>Y twice instead of "RCL ST Z" to minimize stack lift
Y↑X
1
-
NOT
AND
@@@@ Rotate right X bits
X<>Y
+/-
ROTXY
RTN
END
#+END_SRC

** =RLn=: Rotate Y Left by X bits

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:RLn)
@@@@ DSC: Rotate Y Left by X bits
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X rotated left IP(Y) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ BUG: The type Y is not error checked when X<=0
@@@@ UPD: 2021-03-20
LBL "RLn"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 01
R↓
RTN
LBL 01  @@@@ X is positive
+/-
ROTXY
RTN
END
#+END_SRC

** =RRn=: Rotate Y Right by X bits

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:RRn)
@@@@ DSC: Rotate Y Right by X bits
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: X rotated right ABS(IP(Y)) bit(s)
@@@@ FAQ: Y is returned unchanged when X is zero or negative
@@@@ BUG: The type Y is not error checked when X<=0
@@@@ UPD: 2021-03-20
LBL "RRn"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X>0?
GTO 01
R↓
RTN
LBL 01  @@@@ X is positive
ROTXY
RTN
END
#+END_SRC

** =SHFXY=: Shift X by Y Bits (left when Y negative)

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:SHFXY)
@@@@ DSC: Shift X by Y Bits (left when Y negative)
@@@@ IN:  Y: An integer
@@@@ IN:  X: An integer
@@@@ OUT: X: Integer shifted by IP(Y) bit(s)
@@@@ FAQ: Uses SLn & SLr.
@@@@ UPD: 2021-03-20
LBL "SHFXY"
FUNC 21                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X<0?
GTO 01
GTO 02
LBL 01 @@@@ X negative -- shift left
+/-
XEQ "SLn"
RTN
LBL 02 @@@@ X non-negative -- shift right
XEQ "SRn"
RTN
END
#+END_SRC

** =RJ=: Right Justify Bits

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:RJ)
@@@@ DSC: Right Justify Bits
@@@@ IN:  X: an integer
@@@@ OUT: Y: Number of shifts required to justify
@@@@ OUT: X: Justified number
@@@@ FAQ: Like the HP-16c's LJ funciton, but justifies in the other direction
@@@@ UPD: 2021-03-20
LBL "RJ"
FUNC 12                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
0
X<>Y
LBL 00
0
BIT?
GTO 01
GTO 02
LBL 01   @@@@ LSB is one -- DONE!
R↓
X<>Y
RTN
LBL 02   @@@@ LSB is zero
R↓
1
STO+ ST Z
ROTXY
GTO 00
END
#+END_SRC

** =LJ=: Left Justify Bits

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:LJ)
@@@@ DSC: Left Justify Bits
@@@@ IN:  X: an integer
@@@@ OUT: Y: Number of shifts required to justify
@@@@ OUT: X: Justified number
@@@@ FAQ: Just like the HP-16c's LJ funciton
@@@@ UPD: 2021-03-20
LBL "LJ"
FUNC 12                        @@## REQ:free42>=2.5.24
L4STK                          @@## REQ:free42>=3.0
IP
0
X<>Y
LBL 00
WSIZE?
1
-
BIT?
GTO 01
GTO 02
LBL 01   @@@@ MSB is one -- DONE!
R↓
X<>Y
RTN
LBL 02   @@@@ MSB is zero
R↓
1
STO+ ST Z
+/-
ROTXY
GTO 00
END
#+END_SRC

** =ISQRT=: Integer square root

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:ISQRT)
@@@@ DSC: Integer square root
@@@@ IN:  X: a non-negative real number
@@@@ OUT: X: IP(SQRT(ABS(X)))
@@@@ UPD: 2021-03-16
LBL "ISQRT"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
ABS
SQRT
IP
RTN
END
#+END_SRC

** =ILN2=: Integer base 2 log
#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:ILN2)
@@@@ DSC: Integer base 2 log
@@@@ IN:  X: a positive real number
@@@@ OUT: X: IP(log_2(ABS(X)))
@@@@ UPD: 2021-03-16
LBL "ILN2"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
ABS
LN
2
LN
÷
IP
RTN
END
#+END_SRC

** =MSSB=: Position of the Most Significant Set Bit

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:MSSB)
@@@@ DSC: Position of the Most Significant Set Bit
@@@@ IN:  X: An integer
@@@@ OUT: X: Position of MSSB in IP(X) or -1 if IP(X) was 0
@@@@ FAQ:
@@@@ USE: LJ
@@@@ UPD: 2021-03-16
@@@@ FAQ: Runtime Complexity O(WSIZE-log_2(X))
@@@@ FAQ: Closely related to LJ program
LBL "MSSB"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X≠0?
GTO 01
-1
RTN
LBL 01 @@@@ X not zero
XEQ "LJ"
1
+
WSIZE?
X<>Y
-
RTN
END
#+END_SRC

** =LSSB=: Position of the Least Significant Set Bit

#+BEGIN_SRC hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:LSSB)
@@@@ DSC: Position of the Least Significant Set Bit
@@@@ IN:  X: An integer
@@@@ OUT: X: Position of LSSB in IP(X) or -1 if IP(X) was 0
@@@@ UPD: 2021-03-16
@@@@ FAQ: Runtime Complexity O(LSSB(X)) & LSSB<WSIZE
@@@@ FAQ: Closely related to RJ program
LBL "LSSB"
FUNC 11                       @@## REQ:free42>=2.5.24
L4STK                         @@## REQ:free42>=3.0
IP
X≠0?
GTO 01
-1
RTN
LBL 01 @@@@ X not zero
XEQ "RJ"
RTN
END
#+END_SRC


* BASE Menu

** Menu Contents

#+ATTR_HTML: :align center
#+NAME: basem
| Menu:SubMenu:Key | Program |
|------------------+---------|
| S&R:SLn          |         |
| S&R:SRn          |         |
| S&R:RLn          |         |
| S&R:RRn          |         |
| S&R:             |         |
| S&R:BVIEW        |         |
|------------------+---------|
| S&R:LJ           |         |
| S&R:RJ           |         |
| S&R:SHFXY        |         |
| S&R:ROTXY        |         |
| S&R:             |         |
| S&R:BVIEW        |         |
|------------------+---------|
| S&R:SL           |         |
| S&R:SR           |         |
| S&R:RL           |         |
| S&R:RR           |         |
| S&R:             |         |
| S&R:BVIEW        |         |
|------------------+---------|
| BITS:GETB        |         |
| BITS:SB          | SETB    |
| BITS:CB          | CLRB    |
| BITS:            |         |
| BITS:            |         |
| BITS:BVIEW       |         |
|------------------+---------|
| FUN:B#           |         |
| FUN:MSSB         |         |
| FUN:LSSB         |         |
| FUN:ILN2         |         |
| FUN:ISQRT        |         |
| FUN:BVIEW        |         |
|------------------+---------|
| MASK:MSKL        |         |
| MASK:MSKR        |         |
| MASK:MSKn        |         |
| MASK:            |         |
| MASK:            |         |
| MASK:BVIEW       |         |
|------------------+---------|
| ARTH:AND         |         |
| ARTH:OR          |         |
| ARTH:XOR         |         |
| ARTH:NOT         |         |
| ARTH:NEG         | BASE+/- |
| ARTH:            |         |
| ARTH:BVIEW       |         |
|------------------+---------|
| ARTH:+           | BASE+   |
| ARTH:-           | BASE-   |
| ARTH:×           | BASE×   |
| ARTH:÷           | BASE÷   |
| ARTH:MOD         |         |
| ARTH:BVIEW       |         |
|------------------+---------|
| BVIEW            |         |
|------------------+---------|
| HEXM             |         |
| DECM             |         |
| OCTM             |         |
| BINM             |         |
| CFG:WSIZE        |         |
| CFG:WSIZE?       |         |
| CFG:BSIGNED      |         |
| CFG:BWRAP        |         |
| BMNU             |         |

** Menu Code

The menu program is generated via the following bit of elisp.  You must first define the =MJR-generate-42-menu-code= and =MJR-custom-x-gen= by evaluating the code blocks in the =hp42s-meta.org= file.
The skeleton was generated by the following code.  That skeleton has been fleshed out with some custom code.

#+BEGIN_SRC elisp :var tbl=basem :colnames y :results output verbatum :wrap "src hp42s :tangle yes"
;;(MJR-generate-42-menu-code "BASE" tbl "stay" "up" #'MJR-custom-x-gen)
#+END_SRC

#+begin_src hp42s :tangle yes
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ (ref:BASE)
@@@@ DSC: Menu for BASE stuff
@@@@ IN:  Nothing
@@@@ OUT: Nothing
@@@@ FLG: 81: TEMP: Used to and flag checks
@@@@ UPD: 2021-04-04
LBL "BASE"
LBL 01            @@@@ Page 1 of menu BASE
CLMENU
"S&R"
KEY 1 GTO 03
"BITS"
KEY 2 GTO 04
"FUN"
KEY 3 GTO 05
"MASK"
KEY 4 GTO 06
"ARTH"
KEY 5 GTO 07
"BVIEW"
KEY 6 XEQ 08
KEY 7 GTO 02
KEY 8 GTO 02
KEY 9 GTO 00
MENU
STOP
GTO 01
LBL 02            @@@@ Page 2 of menu BASE
CLMENU
"HEX"
FS? 71
├"•"
KEY 1 XEQ 09
"DEC"
SF 81
FS? 71
CF 81
FS? 70
CF 81
FS? 68
CF 81
FS? 81
├"•"
KEY 2 XEQ 10
"OCT"
SF 81
FS? 71
CF 81
FC? 70
CF 81
FS? 81
├"•"
KEY 3 XEQ 11
"BIN"
SF 81
FC? 68
CF 81
FS? 69
CF 81
FS? 81
├"•"
KEY 4 XEQ 12
"CFG"
KEY 5 GTO 13
"BMNU"
KEY 6 XEQ 14
KEY 7 GTO 01
KEY 8 GTO 01
KEY 9 GTO 00
MENU
STOP
GTO 02
LBL 03            @@@@ Page 1 of menu S&R
CLMENU
"SLn"
KEY 1 XEQ 17
"SRn"
KEY 2 XEQ 18
"RLn"
KEY 3 XEQ 19
"RRn"
KEY 4 XEQ 20
"BVIEW"
KEY 6 XEQ 21
KEY 7 GTO 16
KEY 8 GTO 15
KEY 9 GTO 01
MENU
STOP
GTO 03
LBL 15            @@@@ Page 2 of menu S&R
CLMENU
"LJ"
KEY 1 XEQ 22
"RJ"
KEY 2 XEQ 23
"SHFXY"
KEY 3 XEQ 24
"ROTXY"
KEY 4 XEQ 25
"BVIEW"
KEY 6 XEQ 26
KEY 7 GTO 03
KEY 8 GTO 16
KEY 9 GTO 01
MENU
STOP
GTO 15
LBL 16            @@@@ Page 3 of menu S&R
CLMENU
"SL"
KEY 1 XEQ 27
"SR"
KEY 2 XEQ 28
"RL"
KEY 3 XEQ 29
"RR"
KEY 4 XEQ 30
"BVIEW"
KEY 6 XEQ 31
KEY 7 GTO 15
KEY 8 GTO 03
KEY 9 GTO 01
MENU
STOP
GTO 16
LBL 04            @@@@ Page 1 of menu BITS
CLMENU
"GETB"
KEY 1 XEQ 32
"SB"
KEY 2 XEQ 33
"CB"
KEY 3 XEQ 34
"BVIEW"
KEY 6 XEQ 35
KEY 9 GTO 01
MENU
STOP
GTO 04
LBL 05            @@@@ Page 1 of menu FUN
CLMENU
"B#"
KEY 1 XEQ 36
"MSSB"
KEY 2 XEQ 37
"LSSB"
KEY 3 XEQ 38
"ILN2"
KEY 4 XEQ 39
"ISQRT"
KEY 5 XEQ 40
"BVIEW"
KEY 6 XEQ 41
KEY 9 GTO 01
MENU
STOP
GTO 05
LBL 06            @@@@ Page 1 of menu MASK
CLMENU
"MSKL"
KEY 1 XEQ 42
"MSKR"
KEY 2 XEQ 43
"MSKn"
KEY 3 XEQ 44
"BVIEW"
KEY 6 XEQ 45
KEY 9 GTO 01
MENU
STOP
GTO 06
LBL 07            @@@@ Page 1 of menu ARTH
CLMENU
"AND"
KEY 1 XEQ 48
"OR"
KEY 2 XEQ 49
"XOR"
KEY 3 XEQ 50
"NOT"
KEY 4 XEQ 51
"NEG"
KEY 5 XEQ 52
KEY 7 GTO 47
KEY 8 GTO 46
KEY 9 GTO 01
MENU
STOP
GTO 07
LBL 46            @@@@ Page 2 of menu ARTH
CLMENU
"BVIEW"
KEY 1 XEQ 53
"+"
KEY 2 XEQ 54
"-"
KEY 3 XEQ 55
"×"
KEY 4 XEQ 56
"÷"
KEY 5 XEQ 57
"MOD"
KEY 6 XEQ 58
KEY 7 GTO 07
KEY 8 GTO 47
KEY 9 GTO 01
MENU
STOP
GTO 46
LBL 47            @@@@ Page 3 of menu ARTH
CLMENU
"BVIEW"
KEY 1 XEQ 59
KEY 7 GTO 46
KEY 8 GTO 07
KEY 9 GTO 01
MENU
STOP
GTO 47
LBL 13            @@@@ Page 1 of menu CFG
DECM              @@@@ Switch to DECM so we can set word size easily. ;)
CLMENU
"W:"
WSIZE?
AIP
R↓
KEY 1 XEQ 60
FS? 78
"S:+/-"
FC? 78
"S:+"
KEY 2 XEQ 61
FS? 79
"BWR•"
FC? 79
"BWRP"
KEY 3 XEQ 62
FS? 01
"BVM•"
FC? 01
"BVM"
KEY 4 XEQ 63
FC? 02
"BVA•"
FS? 02
"BVA"
KEY 5 XEQ 64
@@@@ KEY 6 XEQ 65
KEY 9 GTO 02
MENU
STOP
GTO 13
LBL 00
EXITALL
RTN
LBL 08               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 09               @@@@ Action for menu key HEXM
HEXM
RTN
LBL 10               @@@@ Action for menu key DECM
DECM
RTN
LBL 11               @@@@ Action for menu key OCTM
OCTM
RTN
LBL 12               @@@@ Action for menu key BINM
BINM
RTN
LBL 14               @@@@ Action for menu key BMNU
EXITALL
"Press R/S To"
"├ Return"
AVIEW
HEXM
STOP
RTN
LBL 17               @@@@ Action for menu key SLn
XEQ "SLn"
RTN
LBL 18               @@@@ Action for menu key SRn
XEQ "SRn"
RTN
LBL 19               @@@@ Action for menu key RLn
XEQ "RLn"
RTN
LBL 20               @@@@ Action for menu key RRn
XEQ "RRn"
RTN
LBL 21               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 22               @@@@ Action for menu key LJ
XEQ "LJ"
RTN
LBL 23               @@@@ Action for menu key RJ
XEQ "RJ"
RTN
LBL 24               @@@@ Action for menu key SHFXY
XEQ "SHFXY"
RTN
LBL 25               @@@@ Action for menu key ROTXY
ROTXY
RTN
LBL 26               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 27               @@@@ Action for menu key SL
XEQ "SL"
RTN
LBL 28               @@@@ Action for menu key SR
XEQ "SR"
RTN
LBL 29               @@@@ Action for menu key RL
XEQ "RL"
RTN
LBL 30               @@@@ Action for menu key RR
XEQ "RR"
RTN
LBL 31               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 32               @@@@ Action for menu key GETB
XEQ "GETB"
RTN
LBL 33               @@@@ Action for menu key SB
XEQ "SETB"
RTN
LBL 34               @@@@ Action for menu key CB
XEQ "CLRB"
RTN
LBL 35               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 36               @@@@ Action for menu key B#
XEQ "B#"
RTN
LBL 37               @@@@ Action for menu key MSSB
XEQ "MSSB"
RTN
LBL 38               @@@@ Action for menu key LSSB
XEQ "LSSB"
RTN
LBL 39               @@@@ Action for menu key ILN2
XEQ "ILN2"
RTN
LBL 40               @@@@ Action for menu key ISQRT
XEQ "ISQRT"
RTN
LBL 41               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 42               @@@@ Action for menu key MSKL
XEQ "MSKL"
RTN
LBL 43               @@@@ Action for menu key MSKR
XEQ "MSKR"
RTN
LBL 44               @@@@ Action for menu key MSKn
XEQ "MSKn"
RTN
LBL 45               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 48               @@@@ Action for menu key AND
AND
RTN
LBL 49               @@@@ Action for menu key OR
OR
RTN
LBL 50               @@@@ Action for menu key XOR
XEQ "XOR"
RTN
LBL 51               @@@@ Action for menu key NOT
NOT
RTN
LBL 52               @@@@ Action for menu key NEG
BASE+/-
RTN
LBL 53               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 54               @@@@ Action for menu key +
BASE+
RTN
LBL 55               @@@@ Action for menu key -
BASE-
RTN
LBL 56               @@@@ Action for menu key ×
BASE×
RTN
LBL 57               @@@@ Action for menu key ÷
BASE÷
RTN
LBL 58               @@@@ Action for menu key MOD
MOD
RTN
LBL 59               @@@@ Action for menu key BVIEW
XEQ "BVIEW"
RTN
LBL 60               @@@@ Action for menu key WSIZE/WSIZE?
WSIZE
RTN
LBL 61               @@@@ Action for menu key SIGNED
BSIGNED
RTN
LBL 62               @@@@ Action for menu key BWRAP
BWRAP
RTN
LBL 63               @@@@ Action for menu key BVM -- BVIEW Menu
FS?C 01
RTN
SF 01
RTN
LBL 64               @@@@ Action for menu key BVA -- BVIEW print padding
FS?C 02
RTN
SF 02
RTN
END
#+end_src

* WORKING                                                          :noexport:

#+BEGIN_SRC text
:::::::::::::::::::::::'##:::::'##::::'###::::'########::'##::: ##:'####:'##::: ##::'######::::::::::::::::::::::::
::::::::::::::::::::::: ##:'##: ##:::'## ##::: ##.... ##: ###:: ##:. ##:: ###:: ##:'##... ##:::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##::'##:. ##:: ##:::: ##: ####: ##:: ##:: ####: ##: ##:::..::::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##:'##:::. ##: ########:: ## ## ##:: ##:: ## ## ##: ##::'####::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##: #########: ##.. ##::: ##. ####:: ##:: ##. ####: ##::: ##:::::::::::::::::::::::
::::::::::::::::::::::: ##: ##: ##: ##.... ##: ##::. ##:: ##:. ###:: ##:: ##:. ###: ##::: ##:::::::::::::::::::::::
:::::::::::::::::::::::. ###. ###:: ##:::: ##: ##:::. ##: ##::. ##:'####: ##::. ##:. ######::::::::::::::::::::::::
::::::::::::::::::::::::...::...:::..:::::..::..:::::..::..::::..::....::..::::..:::......:::::::::::::::::::::::::
#+END_SRC

Code in this section is under construction.  Most likely broken.

#+BEGIN_SRC hp42s
@@@@ Convert a native character number to TNPR character number
LBL "CTOT"
FUNC 11
L4STK
X=0?
GTO 90 @@@@ divide 0
1
X=Y?
GTO 91 @@@@ mult 1
R↓
23
X>Y?
GTO 22 @@@@ UNK 01
R↓
111
X<Y?
GTO 22 @@@@ UNK 01
R↓
23
-
GTO IND ST X
RTN
LBL 90
20
RTN
LBL 91
19
RTN
LBL 01   @@@@ HP 24 -> TNPR 22
22
RTN
LBL 00   @@@@ HP 23 -> TNPR 23
23
RTN
LBL 09   @@@@ HP 32 -> TNPR 31
31
RTN
LBL 20   @@@@ HP 43 -> TNPR 18
18
RTN
LBL 22   @@@@ HP 45 -> TNPR 17
17
RTN
LBL 23   @@@@ HP 46 -> TNPR 24
24
RTN
LBL 25   @@@@ HP 48 -> TNPR 00
0
RTN
LBL 26   @@@@ HP 49 -> TNPR 01
1
RTN
LBL 27   @@@@ HP 50 -> TNPR 02
2
RTN
LBL 28   @@@@ HP 51 -> TNPR 03
3
RTN
LBL 29   @@@@ HP 52 -> TNPR 04
4
RTN
LBL 30   @@@@ HP 53 -> TNPR 05
5
RTN
LBL 31   @@@@ HP 54 -> TNPR 06
6
RTN
LBL 32   @@@@ HP 55 -> TNPR 07
7
RTN
LBL 33   @@@@ HP 56 -> TNPR 08
8
RTN
LBL 34   @@@@ HP 57 -> TNPR 09
9
RTN
LBL 42   @@@@ HP 65 -> TNPR 10
10
RTN
LBL 43   @@@@ HP 66 -> TNPR 11
11
RTN
LBL 44   @@@@ HP 67 -> TNPR 12
12
RTN
LBL 45   @@@@ HP 68 -> TNPR 13
13
RTN
LBL 46   @@@@ HP 69 -> TNPR 14
14
RTN
LBL 47   @@@@ HP 70 -> TNPR 15
15
RTN
LBL 71   @@@@ HP 94 -> TNPR 21
21
RTN
LBL 75   @@@@ HP 98 -> TNPR 26
26
RTN
LBL 81   @@@@ HP 104 -> TNPR 28
28
RTN
LBL 82   @@@@ HP 105 -> TNPR 29
29
RTN
LBL 88   @@@@ HP 111 -> TNPR 27
27
RTN
LBL 02   @@@@ HP 25 -> TNPR 22
22
RTN
LBL 03   @@@@ HP 26 -> TNPR 22
22
RTN
LBL 04   @@@@ HP 27 -> TNPR 22
22
RTN
LBL 05   @@@@ HP 28 -> TNPR 22
22
RTN
LBL 06   @@@@ HP 29 -> TNPR 22
22
RTN
LBL 07   @@@@ HP 30 -> TNPR 22
22
RTN
LBL 08   @@@@ HP 31 -> TNPR 22
22
RTN
LBL 10   @@@@ HP 33 -> TNPR 22
22
RTN
LBL 11   @@@@ HP 34 -> TNPR 22
22
RTN
LBL 12   @@@@ HP 35 -> TNPR 22
22
RTN
LBL 13   @@@@ HP 36 -> TNPR 22
22
RTN
LBL 14   @@@@ HP 37 -> TNPR 22
22
RTN
LBL 15   @@@@ HP 38 -> TNPR 22
22
RTN
LBL 16   @@@@ HP 39 -> TNPR 22
22
RTN
LBL 17   @@@@ HP 40 -> TNPR 22
22
RTN
LBL 18   @@@@ HP 41 -> TNPR 22
22
RTN
LBL 19   @@@@ HP 42 -> TNPR 22
22
RTN
LBL 21   @@@@ HP 44 -> TNPR 22
22
RTN
LBL 24   @@@@ HP 47 -> TNPR 22
22
RTN
LBL 35   @@@@ HP 58 -> TNPR 22
22
RTN
LBL 36   @@@@ HP 59 -> TNPR 22
22
RTN
LBL 37   @@@@ HP 60 -> TNPR 22
22
RTN
LBL 38   @@@@ HP 61 -> TNPR 22
22
RTN
LBL 39   @@@@ HP 62 -> TNPR 22
22
RTN
LBL 40   @@@@ HP 63 -> TNPR 22
22
RTN
LBL 41   @@@@ HP 64 -> TNPR 22
22
RTN
LBL 48   @@@@ HP 71 -> TNPR 22
22
RTN
LBL 49   @@@@ HP 72 -> TNPR 22
22
RTN
LBL 50   @@@@ HP 73 -> TNPR 22
22
RTN
LBL 51   @@@@ HP 74 -> TNPR 22
22
RTN
LBL 52   @@@@ HP 75 -> TNPR 22
22
RTN
LBL 53   @@@@ HP 76 -> TNPR 22
22
RTN
LBL 54   @@@@ HP 77 -> TNPR 22
22
RTN
LBL 55   @@@@ HP 78 -> TNPR 22
22
RTN
LBL 56   @@@@ HP 79 -> TNPR 22
22
RTN
LBL 57   @@@@ HP 80 -> TNPR 22
22
RTN
LBL 58   @@@@ HP 81 -> TNPR 22
22
RTN
LBL 59   @@@@ HP 82 -> TNPR 22
22
RTN
LBL 60   @@@@ HP 83 -> TNPR 22
22
RTN
LBL 61   @@@@ HP 84 -> TNPR 22
22
RTN
LBL 62   @@@@ HP 85 -> TNPR 22
22
RTN
LBL 63   @@@@ HP 86 -> TNPR 22
22
RTN
LBL 64   @@@@ HP 87 -> TNPR 22
22
RTN
LBL 65   @@@@ HP 88 -> TNPR 22
22
RTN
LBL 66   @@@@ HP 89 -> TNPR 22
22
RTN
LBL 67   @@@@ HP 90 -> TNPR 22
22
RTN
LBL 68   @@@@ HP 91 -> TNPR 22
22
RTN
LBL 69   @@@@ HP 92 -> TNPR 22
22
RTN
LBL 70   @@@@ HP 93 -> TNPR 22
22
RTN
LBL 72   @@@@ HP 95 -> TNPR 22
22
RTN
LBL 73   @@@@ HP 96 -> TNPR 22
22
RTN
LBL 74   @@@@ HP 97 -> TNPR 22
22
RTN
LBL 76   @@@@ HP 99 -> TNPR 22
22
RTN
LBL 77   @@@@ HP 100 -> TNPR 22
22
RTN
LBL 78   @@@@ HP 101 -> TNPR 22
22
RTN
LBL 79   @@@@ HP 102 -> TNPR 22
22
RTN
LBL 80   @@@@ HP 103 -> TNPR 22
22
RTN
LBL 83   @@@@ HP 106 -> TNPR 22
22
RTN
LBL 84   @@@@ HP 107 -> TNPR 22
22
RTN
LBL 85   @@@@ HP 108 -> TNPR 22
22
RTN
LBL 86   @@@@ HP 109 -> TNPR 22
22
RTN
LBL 87   @@@@ HP 110 -> TNPR 22
22
RTN
END
#+END_SRC

* EOF

# End of document.

# The following adds some space at the bottom of exported HTML
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
#+HTML: <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br /> <br />
